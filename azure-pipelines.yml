trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  # Add custom packages path as global environment variable
  NUGET_PACKAGES: '$(Build.SourcesDirectory)/CustomPackages'

jobs:
- job: Build
  steps:
  # STEP 1: Add local folder as NuGet source
  - powershell: |
      # Create temporary NuGet config with local source
      $configContent = @"
      <?xml version="1.0" encoding="utf-8"?>
      <configuration>
        <packageSources>
          <add key="CustomPackages" value="$(Build.SourcesDirectory)/CustomPackages" />
          <add key="nuget.org" value="https://api.nuget.org/v3/index.json" />
        </packageSources>
      </configuration>
      "@
      Set-Content -Path "$(Build.SourcesDirectory)/nuget.temp.config" -Value $configContent
    displayName: 'Create temporary NuGet config'

  # STEP 2: Restore with custom config
  - task: NuGetCommand@2
    inputs:
      command: 'restore'
      restoreSolution: '$(solution)'
      feedsToUse: 'config'
      nugetConfigPath: '$(Build.SourcesDirectory)/nuget.temp.config'  # Use custom config
    displayName: 'NuGet restore with custom packages'

  # STEP 3: Build solution
  - task: VSBuild@1
    inputs:
      solution: '$(solution)'
      msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip"'
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'

  # ... rest of your tasks (test, publish artifacts)

  - task: VSTest@2
    inputs:
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(build.artifactStagingDirectory)'
      artifactName: 'drop'

- deployment: DeployToProduction
  displayName: 'Deploy to Production'
  environment: Production-Windows
  dependsOn: Build
  variables:
    vmName: 'Employee-connec'  # Your VM name from error
    vmAdmin: 'your-admin-username'
    siteName: 'MyAPI'
    appPoolName: 'MyAPIAppPool'
    physicalPath: 'C:\inetpub\MyAPI'
  strategy:
    runOnce:
      deploy:
        steps:
        - download: current
          artifact: drop
          
        # Step 1: Configure WinRM Trust
        - task: PowerShell@2
          displayName: 'Configure WinRM Trust'
          inputs:
            targetType: 'inline'
            script: |
              $password = "$(vmPassword)"
              $secPassword = ConvertTo-SecureString $password -AsPlainText -Force
              $credential = New-Object System.Management.Automation.PSCredential("$(vmAdmin)", $secPassword)
              
              # Add target VM to TrustedHosts
              Set-Item WSMan:\localhost\Client\TrustedHosts -Value "$(vmName)" -Concatenate -Force
              
              # Test connection
              $sessionOptions = New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheck
              $session = New-PSSession -ComputerName "$(vmName)" -Credential $credential -SessionOption $sessionOptions -ErrorAction Stop
              Invoke-Command -Session $session -ScriptBlock { hostname } -ErrorAction Stop
              Remove-PSSession $session
              
              Write-Host "Successfully configured WinRM trust to $(vmName)"
            failOnStderr: true
          env:
            vmPassword: $(vmPassword)
            
        # Step 2: Install Web Deploy (updated with WinRM session options)
        - task: PowerShell@2
          displayName: 'Install Web Deploy'
          inputs:
            targetType: 'inline'
            script: |
              $password = "$(vmPassword)"
              $secPassword = ConvertTo-SecureString $password -AsPlainText -Force
              $credential = New-Object System.Management.Automation.PSCredential("$(vmAdmin)", $secPassword)
              
              # Create session options to bypass trust checks
              $sessionOptions = New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheck
              
              Invoke-Command -ComputerName "$(vmName)" -Credential $credential -SessionOption $sessionOptions -ScriptBlock {
                  # Download Web Deploy
                  $url = "https://download.microsoft.com/download/0/1/D/01DC28EA-638C-4A22-A57B-4CEF97755C6C/WebDeploy_amd64_en-US.msi"
                  $output = "$env:TEMP\WebDeploy.msi"
                  
                  if (-not (Test-Path "C:\Program Files\IIS\Microsoft Web Deploy V3\msdeploy.exe")) {
                      Write-Host "Downloading Web Deploy..."
                      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
                      Invoke-WebRequest -Uri $url -OutFile $output -UseBasicParsing
                      
                      Write-Host "Installing Web Deploy..."
                      Start-Process msiexec.exe -ArgumentList "/i $output", "/quiet", "/norestart" -Wait
                      
                      # Configure service
                      Set-ItemProperty "HKLM:\SOFTWARE\Microsoft\WebManagement\Server" -Name "EnableRemoteManagement" -Value 1 -Force
                      Set-Service WMSVC -StartupType Automatic
                      Start-Service WMSVC
                      
                      # Add firewall rule
                      New-NetFirewallRule -DisplayName "Web Deploy" -Direction Inbound -Action Allow -Protocol TCP -LocalPort 8172
                      Write-Host "Web Deploy installed and configured"
                  }
                  else {
                      Write-Host "Web Deploy already installed"
                  }
              }
            failOnStderr: true
          env:
            vmPassword: $(vmPassword)

            
        # Step 4: Verify deployment
        - task: PowerShell@2
          displayName: 'Verify Deployment'
          inputs:
            targetType: 'inline'
            script: |
              $response = Invoke-WebRequest -Uri "http://$(vmName)" -UseBasicParsing -ErrorAction SilentlyContinue
              if ($response.StatusCode -ne 200) {
                  Write-Host "##vso[task.logissue type=error]Application health check failed"
                  exit 1
              }
              else {
                  Write-Host "Deployment verified successfully!"